const B=!1;function h(e){var a,t,r="";if(typeof e=="string"||typeof e=="number")r+=e;else if(typeof e=="object")if(Array.isArray(e)){var o=e.length;for(a=0;a<o;a++)e[a]&&(t=h(e[a]))&&(r&&(r+=" "),r+=t)}else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function U(){for(var e,a,t=0,r="",o=arguments.length;t<o;t++)(e=arguments[t])&&(a=h(e))&&(r&&(r+=" "),r+=a);return r}function b(e){const a=E(e),t=new ArrayBuffer(a.length),r=new DataView(t);for(let o=0;o<t.byteLength;o++)r.setUint8(o,a.charCodeAt(o));return t}const w="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function E(e){e.length%4===0&&(e=e.replace(/==?$/,""));let a="",t=0,r=0;for(let o=0;o<e.length;o++)t<<=6,t|=w.indexOf(e[o]),r+=6,r===24&&(a+=String.fromCharCode((t&16711680)>>16),a+=String.fromCharCode((t&65280)>>8),a+=String.fromCharCode(t&255),t=r=0);return r===12?(t>>=4,a+=String.fromCharCode(t)):r===18&&(t>>=2,a+=String.fromCharCode((t&65280)>>8),a+=String.fromCharCode(t&255)),a}const C=-1,m=-2,N=-3,k=-4,S=-5,T=-6;function j(e,a){if(typeof e=="number")return o(e,!0);if(!Array.isArray(e)||e.length===0)throw new Error("Invalid input");const t=e,r=Array(t.length);function o(f,A=!1){if(f===C)return;if(f===N)return NaN;if(f===k)return 1/0;if(f===S)return-1/0;if(f===T)return-0;if(A)throw new Error("Invalid input");if(f in r)return r[f];const n=t[f];if(!n||typeof n!="object")r[f]=n;else if(Array.isArray(n))if(typeof n[0]=="string"){const s=n[0],i=a==null?void 0:a[s];if(i)return r[f]=i(o(n[1]));switch(s){case"Date":r[f]=new Date(n[1]);break;case"Set":const l=new Set;r[f]=l;for(let c=1;c<n.length;c+=1)l.add(o(n[c]));break;case"Map":const y=new Map;r[f]=y;for(let c=1;c<n.length;c+=2)y.set(o(n[c]),o(n[c+1]));break;case"RegExp":r[f]=new RegExp(n[1],n[2]);break;case"Object":r[f]=Object(n[1]);break;case"BigInt":r[f]=BigInt(n[1]);break;case"null":const g=Object.create(null);r[f]=g;for(let c=1;c<n.length;c+=2)g[n[c]]=o(n[c+1]);break;case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":{const c=globalThis[s],u=n[1],I=b(u),p=new c(I);r[f]=p;break}case"ArrayBuffer":{const c=n[1],u=b(c);r[f]=u;break}default:throw new Error(`Unknown type ${s}`)}}else{const s=new Array(n.length);r[f]=s;for(let i=0;i<n.length;i+=1){const l=n[i];l!==m&&(s[i]=o(l))}}else{const s={};r[f]=s;for(const i in n){const l=n[i];s[i]=o(l)}}return r[f]}return o(0)}export{B as D,U as c,j as u};
